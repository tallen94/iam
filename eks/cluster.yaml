AWSTemplateFormatVersion: "2010-09-09"
Description: Creates an EKS cluster
Resources:
  EKSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Eks-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
    
  NodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      Path: /

  EKSAutoscalingPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: EksAutoscaling
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'autoscaling:DescribeAutoScalingGroups'
              - 'autoscaling:DescribeAutoScalingInstances'
              - 'autoscaling:DescribeLaunchConfigurations'
              - 'autoscaling:DescribeTags'
              - 'autoscaling:SetDesiredCapacity'
              - 'autoscaling:TerminateInstanceInAutoScalingGroup'
              - 'ec2:DescribeLaunchTemplateVersions'
            Resource: '*'
      Roles:
        - !Ref NodeInstanceRole
  
  EKSAdminRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
  
  EKSAdminPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: EksAdmin
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'eks:*'
              - 'ec2:DetachVolume'
            Resource: '*'
      Roles:
        - !Ref EKSAdminRole
  
  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: BastionInstanceProfile
      Path: /
      Roles: 
        - !Ref EKSAdminRole

  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: eks-vpc
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: eks-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
          
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-west-2a
      CidrBlock: 10.0.0.0/17
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: eks-vpc-subnet-1
  
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-west-2b
      CidrBlock: 10.0.128.0/17
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: eks-vpc-subnet-2
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Eks Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet2
  
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: eks-security group
      GroupName: eks-sg
      Tags: 
        - Key: Name
          Value: eks-sg
      VpcId: !Ref VPC
  
  SecurityGroupEgress: 
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: 0.0.0.0/0
      GroupId: !Ref SecurityGroup
  
  SecurityGroupIngress: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref SecurityGroup
      GroupId: !Ref SecurityGroup

  SshSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: eks-security group
      GroupName: eks-ssh-sg
      SecurityGroupEgress:
        IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: eks-ssh-sg
      VpcId: !Ref VPC
    
  EKS:  
    Type: AWS::EKS::Cluster
    Properties: 
      Name: cf-test
      ResourcesVpcConfig: 
        SecurityGroupIds: 
          - !Ref SecurityGroup
        SubnetIds: 
          - !Ref Subnet1
          - !Ref Subnet2
      RoleArn: !GetAtt EKSServiceRole.Arn
      Version: 1.14
  
  NodeGroupDefault:
    Type: AWS::EKS::Nodegroup
    DependsOn: EKS
    Properties: 
      AmiType: AL2_x86_64
      ClusterName: cf-test
      DiskSize: 20
      ForceUpdateEnabled: false
      InstanceTypes: 
        - t3.medium
      Labels: 
        type: ng-1
      NodegroupName: cf-test-ng-1
      NodeRole: !GetAtt NodeInstanceRole.Arn
      RemoteAccess: 
        Ec2SshKey: iam-eks-node
        SourceSecurityGroups: 
          - !Ref SshSecurityGroup
      ScalingConfig: 
        DesiredSize: 1
        MaxSize: 10
        MinSize: 1
      Subnets: 
        - !Ref Subnet1
  
  EksBastion:
    Type: AWS::EC2::Instance
    DependsOn: EKS
    Properties: 
      AvailabilityZone: us-west-2a
      IamInstanceProfile: !Ref BastionInstanceProfile 
      ImageId: ami-0edf3b95e26a682df
      InstanceType: t3.medium
      PrivateIpAddress: 10.0.1.0
      KeyName: iam-eks-node
      SecurityGroupIds: 
        - !Ref SshSecurityGroup
      SubnetId: !Ref Subnet1
      Tags: 
        - Key: Name
          Value: EksBastion
      UserData:
        Fn::Base64: !Sub 
          - |
            #!/bin/sh -xe
            mkdir -p /mnt/iam/filesystem
            mkdir -p /mnt/iam/database
            
            # Wait for volumes
            while [ ! -e /dev/nvme1n1 ]; do echo Waiting for EBS volume to attach; sleep 10; done   
            while [ ! -e /dev/nvme2n1 ]; do echo Waiting for EBS volume to attach; sleep 10; done
            
            # Init volumes
            mkfs -t ext4 /dev/nvme1n1
            mkfs -t ext4 /dev/nvme2n1
            
            # Mount volumes
            mount /dev/nvme1n1 /mnt/iam/filesystem
            mount /dev/nvme2n1 /mnt/iam/database
            
            # Remove lost+found
            rm -r /mnt/iam/filesystem/lost+found
            rm -r /mnt/iam/database/lost+found
            
            # Clone filesystem
            git clone https://github.com/tallen94/iam-filesystem.git /mnt/iam/filesystem
            
            # Install kubectl
            apt-get update
            curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl

            # Aws Iam Authenticator
            curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.8/2019-08-14/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            mv aws-iam-authenticator /usr/local/bin
            
            # Python Venv
            apt-get install -y --no-install-recommends python3 python3-pip

            # Awscli
            pip3 install awscli
            
            # Eks
            aws eks --region us-west-2 update-kubeconfig --name cf-test

            # Detach volumes
            aws ec2 detach-volume --region us-west-2 --volume-id ${dbvolume}
            aws ec2 detach-volume --region us-west-2 --volume-id ${fsvolume} 
          - { dbvolume: !Ref DBVolume, fsvolume: !Ref FSVolume }
  
  FSVolume:
    Type: AWS::EC2::Volume
    Properties: 
      AvailabilityZone: us-west-2a
      Encrypted: false
      Size: 10
      Tags: 
        - Key: Name
          Value: FSVolume
  
  DBVolume:
    Type: AWS::EC2::Volume
    Properties: 
      AvailabilityZone: us-west-2a
      Encrypted: false
      Size: 10
      Tags: 
        - Key: Name
          Value: DBVolume
            
  FSVolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref EksBastion
      VolumeId: !Ref FSVolume
      Device: /dev/xvdf
  
  DBVolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref EksBastion
      VolumeId: !Ref DBVolume
      Device: /dev/xvdg
