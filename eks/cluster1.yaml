AWSTemplateFormatVersion: "2010-09-09"
Description: Creates an EKS cluster
Resources:
  EKSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Eks-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
    
  NodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: NodeGroup-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      Path: /

  EKSAutoscalingPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: EksAutoscaling
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'autoscaling:DescribeAutoScalingGroups'
              - 'autoscaling:DescribeAutoScalingInstances'
              - 'autoscaling:DescribeLaunchConfigurations'
              - 'autoscaling:DescribeTags'
              - 'autoscaling:SetDesiredCapacity'
              - 'autoscaling:TerminateInstanceInAutoScalingGroup'
              - 'ec2:DescribeLaunchTemplateVersions'
            Resource: '*'
      Roles:
        - !Ref NodeInstanceRole

  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: eks-vpc
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: eks-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
          
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-west-2a
      CidrBlock: 10.0.0.0/17
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: eks-vpc-subnet-1
  
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-west-2b
      CidrBlock: 10.0.128.0/17
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: eks-vpc-subnet-2
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Eks Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet2
  
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: eks-security group
      GroupName: eks-sg
      Tags: 
        - Key: Name
          Value: eks-sg
      VpcId: !Ref VPC
  
  SecurityGroupEgress: 
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: 0.0.0.0/0
      GroupId: !Ref SecurityGroup
  
  SecurityGroupIngress: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref SecurityGroup
      GroupId: !Ref SecurityGroup

  SshSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: eks-security group
      GroupName: eks-ssh-sg
      SecurityGroupEgress:
        IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: eks-ssh-sg
      VpcId: !Ref VPC
    
  EKS:  
    Type: AWS::EKS::Cluster
    Properties: 
      Name: cf-test
      ResourcesVpcConfig: 
        SecurityGroupIds: 
          - !Ref SecurityGroup
        SubnetIds: 
          - !Ref Subnet1
          - !Ref Subnet2
      RoleArn: !GetAtt EKSServiceRole.Arn
      Version: 1.14
  
  NodeGroupDefault:
    Type: AWS::EKS::Nodegroup
    DependsOn: EKS
    Properties: 
      AmiType: AL2_x86_64
      ClusterName: cf-test
      DiskSize: 20
      ForceUpdateEnabled: false
      InstanceTypes: 
        - t3.medium
      Labels: 
        type: ng-1
      NodegroupName: cf-test-ng-1
      NodeRole: !GetAtt NodeInstanceRole.Arn
      RemoteAccess: 
        Ec2SshKey: iam-eks-node
        SourceSecurityGroups: 
          - !Ref SshSecurityGroup
      ScalingConfig: 
        DesiredSize: 1
        MaxSize: 10
        MinSize: 1
      Subnets: 
        - !Ref Subnet1
  
  FSVolume:
    Type: AWS::EC2::Volume
    Properties: 
      SnapshotId: snap-04a57a4198e1d5909
      AvailabilityZone: us-west-2a
      Encrypted: false
      Size: 10
      Tags: 
        - Key: Name
          Value: FSVolume
    DeletionPolicy: Snapshot
  
  DBVolume:
    Type: AWS::EC2::Volume
    Properties: 
      SnapshotId: snap-0300b02191e61bf6e
      AvailabilityZone: us-west-2a
      Encrypted: false
      Size: 10
      Tags: 
        - Key: Name
          Value: DBVolume
    DeletionPolicy: Snapshot
